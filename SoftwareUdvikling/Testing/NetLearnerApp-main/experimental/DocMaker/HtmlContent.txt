

			
				
	<article id="post-4306" class="post-4306 post type-post status-publish format-standard hentry category-asp-net category-learn tag-net tag-net-core tag-asp-net tag-asp-net-core tag-blazor tag-ef-core tag-ef-core-migrations tag-entity-framework-core tag-mvc tag-razor-pages tag-shared-library">
				<header class="entry-header">
			
						<h1 class="entry-title">ASP .NET Core code sharing between Blazor, MVC and Razor Pages</h1>
			<div>By  Shahed C on December 16, 2019</div>
							<div class="comments-link">
					<a href="https://wakeupandcode.com/asp-net-core-code-sharing-between-blazor-mvc-and-razor-pages/#comments">10 Replies</a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			
<h1>In This Article: </h1>



<ul><li><a href="#intro">Introduction</a></li><li><a href="#share">Why Share Code Across Projects/Assemblies?</a></li><li><a href="#createsharedlib">Creating a Shared Library</a></li><li><a href="#usesharedlib">Using the Shared Library</a></li><li><a href="#samples">Running the Samples</a></li><li><a href="#conclusion">Conclusion</a></li><li><a href="#refs">References</a></li></ul>



<a name="intro"></a>
<h1>Introduction</h1>



<p>It&#8217;s been a while since I&#8217;ve published a standalone blog post on <a href="https://WakeUpAndCode.com">WakeUpAndCode.com</a>. If you&#8217;ve been following the posts on this website, you may be familiar with my <a href="https://wakeupandcode.com/aspnetcore/#newyear2019">2018 (surprise!) Happy New Year series</a> and <a href="https://wakeupandcode.com/aspnetcore/#aspnetcore2019">2019 A-Z series</a> on various ASP .NET Core topics. This led to a <a href="https://wakeupandcode.com/release-asp-net-core-a-z-ebook/">free ebook</a>, which itself was <a href="https://wakeupandcode.com/worker-service-in-asp-net-core/">generated by a .NET Core Worker Service</a>.</p>



<p>Going forward, you can expect a 2020 A-Z series that will use <a href="https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-3.1?view=aspnetcore-3.1" target="_blank" rel="noreferrer noopener" aria-label="ASP .NET Core 3.1 (LTS) (opens in a new tab)">ASP .NET Core 3.1 (LTS)</a>. The upcoming series will contain new and improved versions of the topics explored in the 2019 series, including Build 2020 coverage.</p>



<p>For now, this one-off blog post will discuss code-sharing for ASP .NET Core developers. For demonstrative purposes, the sample code accompanying this article includes code that is derived from the code snippets provided on the following blog:</p>



<ul><li>CRUD using Blazor and EF Core:  <a href="https://www.blogofpi.com/crud-using-blazor-and-entity-framework-core/">https://www.blogofpi.com/crud-using-blazor-and-entity-framework-core/</a> </li></ul>



<p>Kudos to the author (aka <a rel="noreferrer noopener" aria-label="PI Blogger (opens in a new tab)" href="https://www.blogofpi.com/contact/" target="_blank">PI Blogger</a>) for this great intro article!</p>



<ul><li>Shared Library Sample: <a rel="noopener noreferrer" href="https://github.com/shahedc/WebAppsWithSharedLib" target="_blank">https://github.com/shahedc/WebAppsWithSharedLib</a></li></ul>



<a name="share"></a>
<h1>Why Share Code Across Projects/Assemblies?</h1>



<p>There are multiple reasons why you may want to share code between multiple projects/assemblies. </p>



<ol><li><strong>Code reuse</strong>:  This should be pretty self-explanatory. You shouldn&#8217;t have to rewrite the same code more than once. Placing reusable code in a shared library enables code reuse.</li><li><strong>Multiple front-ends</strong>: In the sample code, there are multiple web apps, all using the same data layer. Splitting into separate assemblies allows you to develop multiple web apps in their own projects/assemblies. </li><li><strong>Separate deployments</strong>: You can deploy each assembly independent of one another. </li></ol>



<p>Even if you&#8217;re just working on a single web app (just Blazor, or a web app that combines Blazor+MVC+Razor Pages), you can still benefit from this type of &#8220;physical&#8221; code separation. Note that this approach is not required for &#8220;separation of concerns&#8221;. The nature of ASP .NET Core web applications make them possible to implement separation of concerns, even if everything is in a single project (such as the one generated by the official VS2019 project templates).  </p>



<p><strong>NOTE</strong>: This article will focus on the creation of a shared library project to hold a shared database context, EF Core migrations, models and services. In your application, you can go further by separating your domain objects and related items into their own project/assembly. </p>



<p>For an official guide on ASP .NET Core architecture, download this free ebook and its sample code. The eShopOnWeb sample includes the &#8220;business layer&#8221; with domain entities under <a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src/ApplicationCore" target="_blank" rel="noreferrer noopener" aria-label="ApplicationCore (opens in a new tab)">ApplicationCore</a>, the &#8220;data layer&#8221; with data context + migrations under <a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src/Infrastructure" target="_blank" rel="noreferrer noopener" aria-label="Infrastucture (opens in a new tab)">Infrastucture</a>, and the &#8220;presentation layer&#8221; with its MVC components under <a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src/Web">Web</a>. </p>



<ul><li>About the guide:  <a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/">https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/</a> </li><li>Download page:  <a href="https://dotnet.microsoft.com/learn/aspnet/architecture">https://dotnet.microsoft.com/learn/aspnet/architecture</a> </li><li>Sample source Code:  <a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src">https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src</a> </li></ul>



<p>Also, here&#8217;s a recent quote from author Steve Smith:</p>



<figure class="wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Separating things by project ensures decisions about dependency direction are enforced by the compiler, helping avoid careless mistakes. Separating into projects isn&#39;t solely about individually deploying or reusing assemblies.</p>&mdash; Steve &quot;ardalis&quot; Smith (@ardalis) <a href="https://twitter.com/ardalis/status/1207301716347150336?ref_src=twsrc%5Etfw">December 18, 2019</a></blockquote><script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<ul><li>Tweet:  <a href="https://twitter.com/ardalis/status/1207301716347150336?s=11">https://twitter.com/ardalis/status/1207301716347150336</a></li><li>Quote: <em>&#8220;Separating things by project ensures decisions about dependency direction are enforced by the compiler, helping avoid careless mistakes. Separating into projects isn&#8217;t solely about individually deploying or reusing assemblies.&#8221;</em></li></ul>



<a name="createsharedlib"></a>
<h1>Creating a shared library</h1>



<p>The quickest way to create a shared library project is to use the built-in project templates. Create a project of type .NET Standard 2.1 using either Visual Studio 2019 or CLI commands for use with VS Code.</p>



<p>To add the new project in Visual Studio 2019:</p>



<ol><li>Add | New Project</li><li>Select the template for Class Library (.NET Standard)</li><li>Click Next</li><li>Name your project and select a location</li><li>Click Create </li></ol>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard-1024x710.png" alt="" class="wp-image-4334" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard-1024x710.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard-300x208.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard-1536x1065.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard-624x433.png 624w, https://wakeupandcode.com/wp-content/uploads/2019/12/sharedlib-netstandard.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Add New Project dialog</figcaption></figure>



<p>Verify that the shared library is a Class Library project targeting .NET Standard 2.1. Check out the official docs to learn more about how to pick a version of .NET Standard for your class libraries.</p>



<ul><li>.NET Standard:  <a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support">https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support</a>  </li></ul>



<p>To verify the target version in Visual Studio 2019:</p>



<ol><li>Right-click your shared library project in Solution Explorer</li><li>Select Properties in the popup context menu</li><li>In the Application section, select a &#8220;Target framework&#8221; value of &#8220;.NET Standard 2.1&#8221;. </li><li>Edit your .csproj project file manually to verify that the correct target framework is being used.</li></ol>


<span style="color: #808080;font-family: Courier New;">&lt;PropertyGroup&gt;   &lt;TargetFramework&gt;netstandard2.1&lt;/TargetFramework&gt;&lt;/PropertyGroup&gt;</span>


<p>If using the .NET CLI, type the following command:</p>


<span style="color: #808080;font-family: Courier New;">&gt;dotnet new classlib -f netstandard2.1</span>


<p>As of .NET Core 3.0, Entity Framework Core is now available via NuGet.  As a result, you must add the following packages manually. </p>



<ul><li>Microsoft.EntityFrameworkCore</li><li>Microsoft.AspNetCore.Identity.EntityFrameworkCore</li><li>Microsoft.EntityFrameworkCore.SqlServer</li></ul>



<p>To add EF Core in Visual Studio 2019:</p>



<ol><li>In Solution Explorer, right-click your shared library project</li><li>Select &#8220;Manage NuGet Packages&#8230;&#8221;</li><li>Search for the aforementioned packages and install v3.1 for each</li></ol>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/efcore-nuget-1024x592.png" alt="" class="wp-image-4337" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/efcore-nuget-1024x592.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/efcore-nuget-300x174.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/efcore-nuget-624x361.png 624w, https://wakeupandcode.com/wp-content/uploads/2019/12/efcore-nuget.png 1343w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>EF Core Nuget Packages</figcaption></figure>



<p>To create a new database context in the shared library project:</p>



<ol><li>Create a &#8220;Data&#8221; folder at the root level of the project folder</li><li>In the Data folder, create a new public class named &#8220;LibDbContext&#8221; that inherits from &#8220;IdentityDbContext&#8221;</li><li>Create a &#8220;Models&#8221; folder at the root level of the project folder</li><li>In the Models folder, add one or more model classes, to be used by your web application project(s)</li><li>In the context class, add one or more DbSet&lt;T&gt; properties </li></ol>



<p>Your shared context class  LibDbContext should now look like the following snippet:</p>


<span style="color: #808080;font-family: Courier New;">using Microsoft.AspNetCore.Identity.EntityFrameworkCore;using Microsoft.EntityFrameworkCore;using SharedLib.Models;namespace SharedLib.Data{    public class LibDbContext : IdentityDbContext    {        public LibDbContext(DbContextOptions&lt;LibDbContext&gt; options)            : base(options)        {        }        protected LibDbContext()        {        }        public DbSet&lt;CinematicItem&gt; CinematicItems { get; set; }    }}</span>


<p>In this case, the one DbSet property represents a collection of CinematicItems defined in its own  <strong>CinematicItem  </strong>model class file:</p>


<span style="color: #808080;font-family: Courier New;">using System;namespace SharedLib.Models{   public class CinematicItem   {      public int Id { get; set; }      public string Name { get; set; }      public string Description { get; set; }      public int Phase { get; set; }      public DateTime ReleaseDate { get; set; }   }}</span>


<p>Note that the new database context in the shared library is a replacement for any database context you may already have in your web app projects. In fact, you&#8217;ll have to edit your Startup.cs file in each web app project to ensure that it is using the correct database context. </p>



<a name="usesharedlib"></a>
<h1>Using the Shared Library</h1>



<p>If you are starting a brand new web project, you can start with an auto-generated template. You could create an empty web project and add everything manually as needed. But it may be easier to start with a standard web template and remove/edit items as necessary.</p>



<p>To create a new web project in Visual Studio 2019:</p>



<ol><li>Add | New Project </li><li> Select the template <ol><li>For Blazor, select Blazor App</li><li>For MVC or Razor Pages, select ASP .NET Core Web Application</li></ol></li><li>Click Next</li><li>Name your project and select a location</li><li>Click Create  </li><li>Select .NET Core, ASP .NET Core 3.1, and a project template<ol><li>For Blazor, select Blazor Server App</li><li>For Razor Pages, select Web Application</li><li>For MVC, select Web Application (Model-View-Controller)</li></ol></li><li>For Authentication, change &#8220;No Authentication&#8221; to &#8220;Individual User Accounts&#8221;</li><li>Under Advanced, leave the checkbox checked for &#8220;Configure for HTTPS&#8221;</li></ol>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp-1024x710.png" alt="" class="wp-image-4341" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp-1024x710.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp-300x208.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp-1536x1065.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp-624x433.png 624w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-webapp.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>New Project: Web Application</figcaption></figure>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor-1024x710.png" alt="" class="wp-image-4342" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor-1024x710.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor-300x208.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor-1536x1065.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor-624x433.png 624w, https://wakeupandcode.com/wp-content/uploads/2019/12/project-blazor.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>New Project: Blazor Server App</figcaption></figure>



<p>Following the above steps will add a new database context and an initial migration. Since we will be using our shared library instead, let&#8217;s do some cleanup in each web project you created.</p>



<p>In each web project, add the Shared Library as a dependency:</p>



<ol><li>In Solution Explorer, right-click Dependencies for a web project</li><li>Click Add Reference under Dependencies</li><li>Select the shared library project</li><li>Click Ok</li><li>Repeat for each web project</li></ol>



<p>In each web project, update the Startup.cs class: </p>



<ol><li>Replace any mentions of ApplicationDbContext with LibDbContext</li><li>Expand the UseSqlServer method call to refer to the connection string and db context in the shared assembly</li></ol>


<span style="color: #808080;font-family: Courier New;">services.AddDbContext&lt;LibDbContext&gt;(options =&gt;{   options      .UseSqlServer(Configuration.GetConnectionString("DefaultConnection"),         assembly =&gt;             assembly.MigrationsAssembly            (typeof(LibDbContext).Assembly.FullName));});services.AddDefaultIdentity&lt;IdentityUser&gt;(   options =&gt;       options.SignIn.RequireConfirmedAccount = true)         .AddEntityFrameworkStores&lt;LibDbContext&gt;();</span>


<p>Perform some additional cleanup in each web project:</p>



<ol><li>Delete the template-generated <strong>ApplicationDbContext</strong> class</li><li>Delete any initial migrations in the Migrations folder</li><li>In the Startup.cs class, remove any using statements that mention the .Data namespace in your web project</li><li>Add a using statement referring to the .Data namespace in your shared library project, e.g. SharedLib.Data </li><li>Make a similar change in your partial view &#8220;_ViewImports.chstml&#8221; if applicable </li><li> If you have more than one web project, use the ConnectionString value from the first appsettings.json file and reuse it in the other web app projects.</li><li><strong>BUT WAIT</strong>: beyond any initial sample, always use <a href="https://wakeupandcode.com/your-web-app-secrets-in-asp-net-core/">app secrets</a> during development to avoid connection strings in appsettings.json files. For Azure-deployed web projects, use <a href="https://wakeupandcode.com/key-vault-for-asp-net-core-web-apps/">Key Vault</a> or environment variables in your <a href="https://wakeupandcode.com/deploying-asp-net-core-to-azure-app-service/">App Service</a>. </li></ol>



<a name="samples"></a>
<h1>Running the Samples</h1>



<p>In order to run the web app samples, clone the following repository:</p>


<ul>
<li>Shared Library Sample: <a href="https://github.com/shahedc/WebAppsWithSharedLib" target="_blank" rel="noopener noreferrer">https://github.com/shahedc/WebAppsWithSharedLib</a></li>
</ul>


<p>Here, you will find 4 projects:</p>



<ol><li>SharedLib: shared library project</li><li>WebAppBlazor: Blazor server-side web project </li><li>WebAppMvc: MVC web project</li><li>WebAppPages: Razor Pages web project</li></ol>



<p>To create a local copy of the database:</p>



<ol><li>Open the solution file in Visual Studio 2019</li><li>In the Package Manager Console panel, change the Default Project to &#8220;SharedLib&#8221; to ensure that EF Core commands are run against the correct project</li><li>In the Package Manager console, run the <strong>Update-Database</strong> command</li><li>Verify that there are no errors upon database creation</li></ol>



<p>To run the samples from Visual Studio 2019:</p>



<ol><li>Run each web project one after another</li><li>Navigate to the Cinematic Items link in the navigation menu</li><li>Add/Edit/Delete items in any of the web apps</li><li>Verify that your data changes are reflected no matter which web app you use</li></ol>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-1024x599.png" alt="" class="wp-image-4345" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-1024x599.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-300x176.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-1536x899.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-2048x1199.png 2048w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-blazor-624x365.png 624w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Sample: Blazor Web App</figcaption></figure>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-1024x599.png" alt="" class="wp-image-4346" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-1024x599.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-300x176.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-1536x899.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-2048x1199.png 2048w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-mvc-624x365.png 624w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Sample: MVC Web App</figcaption></figure>



<figure class="wp-block-image size-large"><img src="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-1024x599.png" alt="" class="wp-image-4347" srcset="https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-1024x599.png 1024w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-300x176.png 300w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-1536x899.png 1536w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-2048x1199.png 2048w, https://wakeupandcode.com/wp-content/uploads/2019/12/sample-pages-624x365.png 624w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Sample: Razor Pages Web App</figcaption></figure>



<p><strong>NOTE</strong>: During Blazor development, editing a Razor component may not always trigger the proper Intellisense help in the containing Page. You may have to clean+rebuild solution or even reopen the solution in VS2019. </p>



<a name="conclusion"></a>
<h1>Conclusion</h1>



<p>In this article, we covered the following:</p>



<ul><li>Creation of a shared library project for use in one or more ASP .NET Core web apps</li><li>Some reasons for such an approach</li><li>Steps required to use the shared library</li><li>Sample projects to see the shared library in action</li></ul>



<a name="refs"></a>
<h1>References</h1>



<ul><li>.NET Standard:  <a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support">https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support</a> </li><li>ASP .NET Core Docs:  <a href="https://docs.microsoft.com/en-us/aspnet/core/getting-started/">https://docs.microsoft.com/en-us/aspnet/core/getting-started/</a> </li><li>Blazor Docs:  <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started">https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started</a> </li><li> CRUD using Blazor and EF Core:  <a href="https://www.blogofpi.com/crud-using-blazor-and-entity-framework-core/">https://www.blogofpi.com/crud-using-blazor-and-entity-framework-core/</a> </li><li>Nate B&#8217;s Little ASP .NET Core Book:  <a href="https://recaffeinate.co/book/">https://recaffeinate.co/book/</a>  </li><li>Michael Washington&#8217;s Blazor Book:  <a href="http://blazorhelpwebsite.com/Market/Books/AnIntroductiontoBuildingApplicationswithBlazor.aspx">http://blazorhelpwebsite.com/Market/Books/AnIntroductiontoBuildingApplicationswithBlazor.aspx</a> </li><li>Using EF Core in a Separate Class Library:  <a href="https://dotnetthoughts.net/using-ef-core-in-a-separate-class-library/">https://dotnetthoughts.net/using-ef-core-in-a-separate-class-library/</a> </li><li>Should you split your ASP.NET MVC project into multiple projects? &#8211;  <a href="https://programmingwithmosh.com/net/should-you-split-your-asp-net-mvc-project-into-multiple-projects/">https://programmingwithmosh.com/net/should-you-split-your-asp-net-mvc-project-into-multiple-projects/</a> </li><li>Web App Secrets:  <a href="https://wakeupandcode.com/your-web-app-secrets-in-asp-net-core/">https://wakeupandcode.com/your-web-app-secrets-in-asp-net-core/</a> </li><li>Key Vault:  <a href="https://wakeupandcode.com/key-vault-for-asp-net-core-web-apps/">https://wakeupandcode.com/key-vault-for-asp-net-core-web-apps/</a> </li><li>App Service:  <a href="https://wakeupandcode.com/deploying-asp-net-core-to-azure-app-service/">https://wakeupandcode.com/deploying-asp-net-core-to-azure-app-service/</a> </li></ul>
					</div><!-- .entry-content -->
		
		<!-- .entry-meta -->
	</article><!-- #post -->

				<!-- .nav-single -->

				
<!-- #comments .comments-area -->
			
		